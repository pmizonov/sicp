#lang scheme

(define (square x)
  (* x x))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (next n)
  (if (= n 2) 3
      (+ n 2)))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (even? a)
  (divides? 2 a))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (current-inexact-milliseconds)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (current-inexact-milliseconds) start-time))
      (void)))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(timed-prime-test 1000)
(timed-prime-test 1001)
(timed-prime-test 1009)
(timed-prime-test 1013)
(timed-prime-test 1019)
(timed-prime-test 10007)
(timed-prime-test 10009)
(timed-prime-test 10037)
(timed-prime-test 100003)
(timed-prime-test 100019)
(timed-prime-test 100043)
(timed-prime-test 1000003)
(timed-prime-test 1000033)
(timed-prime-test 1000037)

; Результаты выполнения программы используя find-divisor из 1.22
;1000
;1001
;1009 *** 0.00390625
;1013 *** 0.00390625
;1019 *** 0.00390625
;10007 *** 0.011962890625
;10009 *** 0.011962890625
;10037 *** 0.011962890625
;100003 *** 0.035888671875
;100019 *** 0.035888671875
;100043 *** 0.035888671875
;1000003 *** 0.11083984375
;1000033 *** 0.11083984375
;1000037 *** 0.111083984375

; Результаты выполнения программы используя find-divisor и next

;1000
;1001
;1009 *** 0.003173828125
;1013 *** 0.00390625
;1019 *** 0.003173828125
;10007 *** 0.008056640625
;10009 *** 0.008056640625
;10037 *** 0.008056640625
;100003 *** 0.02392578125
;100019 *** 0.02294921875
;100043 *** 0.02294921875
;1000003 *** 0.072021484375
;1000033 *** 0.072021484375
;1000037 *** 0.07177734375

; Двукратного ускорения проверки не наблюдается. 
; Соотношение скоростей алгоритмов:
;
;1009 *** 0.00390625 / 0.003173828125 = 1.230769231
;1013 *** 0.00390625 / 0.00390625 = 1
;1019 *** 0.00390625 / 0.003173828125 = 1.230769231
;10007 *** 0.011962890625 / 0.008056640625 = 1.484848485
;10009 *** 0.011962890625 / 0.008056640625 = 1.484848485
;10037 *** 0.011962890625 / 0.008056640625 = 1.484848485
;100003 *** 0.035888671875 / 0.02392578125 = 1.5
;100019 *** 0.035888671875 / 0.02294921875 = 1.563829787
;100043 *** 0.035888671875 / 0.02294921875 = 1.563829787
;1000003 *** 0.11083984375 / 0.072021484375 = 1.538983051
;1000033 *** 0.11083984375 / 0.072021484375 = 1.538983051
;1000037 *** 0.111083984375 / 0.07177734375 = 1.547619048
;
; Почему не наблюдается прироста скорости в 2 раза?
; Изменения, внесенные в программу, касались вычисления следующего делителя для проверки.
; В первой версии делитель вычислялся как (+ n 1).
; Во второй версии делитель вычисляется как (if (= n 2) 3 (+ n 2))).
; Отсутствие ожидаемого прироста производительности скорее всего связано 
; с расходами на вычисление условного оператора if и вызов процедуры next. 
